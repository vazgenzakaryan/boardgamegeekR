collection_url <- build_bgg_url(type='collection', username=username, a)
response <- GET(collection_url)
collection_text <- content(response)
ids <- xml_integer(xml_find_all(collection_text, xpath='//item/@objectid'))
return(build_games(ids))
}
url <- build_games_url(type='thing', ids=ids)
url <- build_bgg_url(type='thing', ids=ids)
response <- GET(url)
text <- content(response)
xml_find_all(text, xpath='//item@type')
xml_find_all(text, xpath='//item/@type')
xml_child(text, search=1)
a<- xml_child(text, search=1)
a
xml_find_all(a, xpath='//item/@type')
xml_find_all(a, xpath='.//*[name()="item"')
xml_find_all(a, xpath=".//*[name()='item']")
url
xml_find_all(a, xpath="//*[name()='item']")
a <- xml_find_all(a, xpath="//*[name()='item']")[1]
a
xml_find_all(a, xpath="//item/@type")
library(XML)
xmlParse('https://www.boardgamegeek.com/xmlapi2/thing?id=167791,174430&stats=1')
install.packages('RCurl')
library(RCurl)
x <- getURL(url)
d < xmlParse(x)
d <- xmlParse(x)
d
a <- xmlSApply(d, function(x) xmlSApply(x, xmlValue))
xmlValue(a)
xmlValue(d)
d
a
b
c
d
x
xmlTreeParse(x)
build_games(ids)
#this function builds a tibble containing details of a single game; internal use only.
build_games <- function(ids) {
url <- build_bgg_url(type='thing', ids=ids)
response <- GET(url)
text <- content(response)
games <- tibble()
thingtype <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//item/@type"))
#Get common properties
id <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//item/@id"))
name <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//name/@value"))[1]
description <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//description"))
year_published <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//yearpublished/@value"))[1]
min_players <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//minplayers/@value"))[1]
max_players <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//maxplayers/@value"))[1]
playing_time <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//playingtime/@value"))[1]
min_play_time <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//minplaytime/@value"))[1]
max_play_time <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//maxplaytime/@value"))[1]
minimum_age <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//minage/@value"))[1]
#  Get statistics
num_users_rated <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//usersrated/@value"))[1]
average <- xml_double(xml_find_all(xml_child(text, search=i), xpath="//average/@value"))[1]
bayes_average <- xml_double(xml_find_all(xml_child(text, search=i), xpath="//bayesaverage/@value"))[1]
#Get ranks: the rank_name=='boardgame' part forces all rpg or video options out because it forces integer(0)
rank_name <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//rank/@name"))
rank_value <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//rank/@value"))
rank_df <- data.frame(rank_name, rank_value)
rank_temp <- rank_df %>% filter(rank_name=='boardgame')%>% select(rank_value)
rank <- as.integer(as.character(rank_temp$rank_value))
#Get other properties same as above, rpg and video are forced out
type <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//link/@type"))
value <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//link/@value"))
type_value <- data.frame(type, value)
cat <- type_value %>% filter(type=='boardgamecategory') %>% select(value)
categories <- paste0(cat$value, collapse="; ")
mech <- type_value %>% filter(type=='boardgamemechanic') %>% select(value)
mechanics <- paste0(mech$value, collapse='; ')
fam <- type_value %>% filter(type=='boardgamefamily') %>% select(value)
family <- paste0(fam$value, collapse='; ')
exp <- type_value %>% filter(type=='boardgameexpansion') %>% select(value)
expansions <- paste0(exp$value, collapse='; ')
des  <- type_value %>% filter(type=='boardgamedesigner') %>% select(value)
designers <- paste0(des$value, collapse='; ')
art  <- type_value %>% filter(type=='boardgameartist') %>% select(value)
artists <- paste0(art$value, collapse='; ')
pub  <- type_value %>% filter(type=='boardgamepublisher') %>% select(value)
publishers <- paste0(pub$value, collapse='; ')
game <- tibble(id, name, description, year_published, min_players, max_players, playing_time, min_play_time, max_play_time, minimum_age,
num_users_rated, average, bayes_average, rank, categories, mechanics, family, expansions, designers, artists, publishers)
games <- rbind(games, game)
return(games)
}
#this function builds URLs to BGG for different types of requests such as thing, search, and collection. Internal use only.
build_bgg_url <- function(type, ids=NULL, query=NULL, exact=FALSE, username=NULL, include_collection_expansions=TRUE) {
start_url <- "https://www.boardgamegeek.com/xmlapi2/"
if (type=='thing') {
ids_comma <- paste0(ids, collapse=',')
url <- paste0(start_url, 'thing?id=', ids_comma, "&stats=1")
} else if(type=='search') {
query <- gsub(" ", "+", query)
url <- paste0(start_url, 'search?query=', query)
if (exact) {
url <- paste0(url, '&exact=1')
}}
else if (type=='collection') {
url <- paste0(start_url, 'collection?username=', username)
if(include_collection_expansions==FALSE){
url <- paste0(url, '&excludesubtype=boardgameexpansion')
}
}
return(url)
}
#this is one of the two functions that the user of the package should interact with. It takes a search query, whether or not to include expansions,
#and whether or not the search should be exact. Then it calls the appropriate functions, and returns a tibble of all the search results.
search_bgg <- function(query, include_expansions=TRUE, exact=FALSE)
{
search_url <- build_bgg_url(type='search', query=query, exact=exact)
response<-GET(search_url)
search_text <- content(response)
ids <- xml_integer(xml_find_all(search_text, xpath='//item/@id'))
types <- xml_text(xml_find_all(search_text, xpath='//item/@type'))
ids_types <- data.frame(ids, types)
if(include_expansions) {
temp <- ids_types %>% filter(types=='boardgame' | types=='boardgameexpansion')
} else {
temp <- ids_types %>% filter(types=='boardgame')
}
ids <- temp$ids
return(build_games(ids))
}
#This is the second function that the user can interact with. It takes a username and builds a tibble of all the board games and expansions in that
#user's collection. Note that the expansions are included by default; use include_collection_expansions=FALSE to exclude them.
bgg_collection <- function(username, include_collection_expansions=TRUE){
a <- include_collection_expansions
collection_url <- build_bgg_url(type='collection', username=username, a)
response <- GET(collection_url)
collection_text <- content(response)
ids <- xml_integer(xml_find_all(collection_text, xpath='//item/@objectid'))
return(build_games(ids))
}
build_games
build_games(ids)
#this function builds a tibble containing details of a single game; internal use only.
build_games <- function(ids) {
url <- build_bgg_url(type='thing', ids=ids)
response <- GET(url)
text <- content(response)
games <- tibble()
#thingtype <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//item/@type"))
#Get common properties
games$id <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//item/@id"))
games$name <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//name/@value"))[1]
games$description <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//description"))
games$year_published <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//yearpublished/@value"))[1]
games$min_players <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//minplayers/@value"))[1]
games$max_players <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//maxplayers/@value"))[1]
games$playing_time <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//playingtime/@value"))[1]
games$min_play_time <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//minplaytime/@value"))[1]
games$max_play_time <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//maxplaytime/@value"))[1]
games$minimum_age <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//minage/@value"))[1]
#  Get statistics
games$num_users_rated <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//usersrated/@value"))[1]
games$average <- xml_double(xml_find_all(xml_child(text, search=i), xpath="//average/@value"))[1]
games$bayes_average <- xml_double(xml_find_all(xml_child(text, search=i), xpath="//bayesaverage/@value"))[1]
#Get ranks: the rank_name=='boardgame' part forces all rpg or video options out because it forces integer(0)
games$rank_name <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//rank/@name"))
games$rank_value <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//rank/@value"))
games$rank_df <- data.frame(rank_name, rank_value)
games$rank_temp <- rank_df %>% filter(rank_name=='boardgame')%>% select(rank_value)
games$rank <- as.integer(as.character(rank_temp$rank_value))
#Get other properties same as above, rpg and video are forced out
games$type <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//link/@type"))
games$value <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//link/@value"))
games$type_value <- data.frame(type, value)
games$cat <- type_value %>% filter(type=='boardgamecategory') %>% select(value)
games$categories <- paste0(cat$value, collapse="; ")
games$mech <- type_value %>% filter(type=='boardgamemechanic') %>% select(value)
games$mechanics <- paste0(mech$value, collapse='; ')
games$fam <- type_value %>% filter(type=='boardgamefamily') %>% select(value)
games$family <- paste0(fam$value, collapse='; ')
games$exp <- type_value %>% filter(type=='boardgameexpansion') %>% select(value)
games$expansions <- paste0(exp$value, collapse='; ')
games$des  <- type_value %>% filter(type=='boardgamedesigner') %>% select(value)
games$designers <- paste0(des$value, collapse='; ')
games$art  <- type_value %>% filter(type=='boardgameartist') %>% select(value)
games$artists <- paste0(art$value, collapse='; ')
games$pub  <- type_value %>% filter(type=='boardgamepublisher') %>% select(value)
games$publishers <- paste0(pub$value, collapse='; ')
return(games)
}
#this function builds URLs to BGG for different types of requests such as thing, search, and collection. Internal use only.
build_bgg_url <- function(type, ids=NULL, query=NULL, exact=FALSE, username=NULL, include_collection_expansions=TRUE) {
start_url <- "https://www.boardgamegeek.com/xmlapi2/"
if (type=='thing') {
ids_comma <- paste0(ids, collapse=',')
url <- paste0(start_url, 'thing?id=', ids_comma, "&stats=1")
} else if(type=='search') {
query <- gsub(" ", "+", query)
url <- paste0(start_url, 'search?query=', query)
if (exact) {
url <- paste0(url, '&exact=1')
}}
else if (type=='collection') {
url <- paste0(start_url, 'collection?username=', username)
if(include_collection_expansions==FALSE){
url <- paste0(url, '&excludesubtype=boardgameexpansion')
}
}
return(url)
}
#this is one of the two functions that the user of the package should interact with. It takes a search query, whether or not to include expansions,
#and whether or not the search should be exact. Then it calls the appropriate functions, and returns a tibble of all the search results.
search_bgg <- function(query, include_expansions=TRUE, exact=FALSE)
{
search_url <- build_bgg_url(type='search', query=query, exact=exact)
response<-GET(search_url)
search_text <- content(response)
ids <- xml_integer(xml_find_all(search_text, xpath='//item/@id'))
types <- xml_text(xml_find_all(search_text, xpath='//item/@type'))
ids_types <- data.frame(ids, types)
if(include_expansions) {
temp <- ids_types %>% filter(types=='boardgame' | types=='boardgameexpansion')
} else {
temp <- ids_types %>% filter(types=='boardgame')
}
ids <- temp$ids
return(build_games(ids))
}
#This is the second function that the user can interact with. It takes a username and builds a tibble of all the board games and expansions in that
#user's collection. Note that the expansions are included by default; use include_collection_expansions=FALSE to exclude them.
bgg_collection <- function(username, include_collection_expansions=TRUE){
a <- include_collection_expansions
collection_url <- build_bgg_url(type='collection', username=username, a)
response <- GET(collection_url)
collection_text <- content(response)
ids <- xml_integer(xml_find_all(collection_text, xpath='//item/@objectid'))
return(build_games(ids))
}
build_games(ids)
build_games
#this function builds a tibble containing details of a single game; internal use only.
build_game <- function(id) {
url <- build_bgg_url(type='thing', id=id)
response <- GET(url)
text <- content(response)
game <- tibble()
#thingtype <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//item/@type"))
#Get common properties
game$id <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//item/@id"))
game$name <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//name/@value"))[1]
game$description <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//description"))
game$year_published <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//yearpublished/@value"))[1]
game$min_players <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//minplayers/@value"))[1]
game$max_players <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//maxplayers/@value"))[1]
game$playing_time <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//playingtime/@value"))[1]
game$min_play_time <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//minplaytime/@value"))[1]
game$max_play_time <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//maxplaytime/@value"))[1]
game$minimum_age <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//minage/@value"))[1]
#  Get statistics
game$num_users_rated <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//usersrated/@value"))[1]
game$average <- xml_double(xml_find_all(xml_child(text, search=i), xpath="//average/@value"))[1]
game$bayes_average <- xml_double(xml_find_all(xml_child(text, search=i), xpath="//bayesaverage/@value"))[1]
#Get ranks: the rank_name=='boardgame' part forces all rpg or video options out because it forces integer(0)
rank_name <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//rank/@name"))
rank_value <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//rank/@value"))
rank_df <- data.frame(rank_name, rank_value)
rank_temp <- rank_df %>% filter(rank_name=='boardgame')%>% select(rank_value)
game$rank <- as.integer(as.character(rank_temp$rank_value))
#Get other properties same as above, rpg and video are forced out
type <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//link/@type"))
value <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//link/@value"))
game$type_value <- data.frame(type, value)
cat <- type_value %>% filter(type=='boardgamecategory') %>% select(value)
game$categories <- paste0(cat$value, collapse="; ")
$mech <- type_value %>% filter(type=='boardgamemechanic') %>% select(value)
game$mechanics <- paste0(mech$value, collapse='; ')
fam <- type_value %>% filter(type=='boardgamefamily') %>% select(value)
game$family <- paste0(fam$value, collapse='; ')
exp <- type_value %>% filter(type=='boardgameexpansion') %>% select(value)
game$expansions <- paste0(exp$value, collapse='; ')
des  <- type_value %>% filter(type=='boardgamedesigner') %>% select(value)
game$designers <- paste0(des$value, collapse='; ')
art  <- type_value %>% filter(type=='boardgameartist') %>% select(value)
game$artists <- paste0(art$value, collapse='; ')
pub  <- type_value %>% filter(type=='boardgamepublisher') %>% select(value)
game$publishers <- paste0(pub$value, collapse='; ')
return(game)
}
#this function builds URLs to BGG for different types of requests such as thing, search, and collection. Internal use only.
build_bgg_url <- function(type, id=NULL, query=NULL, exact=FALSE, username=NULL, include_collection_expansions=TRUE) {
start_url <- "https://www.boardgamegeek.com/xmlapi2/"
if (type=='thing') {
url <- paste0(start_url, 'thing?id=', id, "&stats=1")
} else if(type=='search') {
query <- gsub(" ", "+", query)
url <- paste0(start_url, 'search?query=', query)
if (exact) {
url <- paste0(url, '&exact=1')
}}
else if (type=='collection') {
url <- paste0(start_url, 'collection?username=', username)
if(include_collection_expansions==FALSE){
url <- paste0(url, '&excludesubtype=boardgameexpansion')
}
}
return(url)
}
build_games <- function(ids) {
games <- tibble()
for (id in ids) {
rbind(games, build_game(id))
Sys.sleep(2)
}
return(games)
}
#this is one of the two functions that the user of the package should interact with. It takes a search query, whether or not to include expansions,
#and whether or not the search should be exact. Then it calls the appropriate functions, and returns a tibble of all the search results.
search_bgg <- function(query, include_expansions=TRUE, exact=FALSE)
{
search_url <- build_bgg_url(type='search', query=query, exact=exact)
response<-GET(search_url)
search_text <- content(response)
ids <- xml_integer(xml_find_all(search_text, xpath='//item/@id'))
types <- xml_text(xml_find_all(search_text, xpath='//item/@type'))
ids_types <- data.frame(ids, types)
if(include_expansions) {
temp <- ids_types %>% filter(types=='boardgame' | types=='boardgameexpansion')
} else {
temp <- ids_types %>% filter(types=='boardgame')
}
ids <- temp$ids
return(build_games(ids))
}
#This is the second function that the user can interact with. It takes a username and builds a tibble of all the board games and expansions in that
#user's collection. Note that the expansions are included by default; use include_collection_expansions=FALSE to exclude them.
bgg_collection <- function(username, include_collection_expansions=TRUE){
a <- include_collection_expansions
collection_url <- build_bgg_url(type='collection', username=username, a)
response <- GET(collection_url)
collection_text <- content(response)
ids <- xml_integer(xml_find_all(collection_text, xpath='//item/@objectid'))
return(build_games(ids))
}
build_bgg_url(167791)
build_bgg_url <- function(type, id=NULL, query=NULL, exact=FALSE, username=NULL, include_collection_expansions=TRUE) {
start_url <- "https://www.boardgamegeek.com/xmlapi2/"
if (type=='thing') {
url <- paste0(start_url, 'thing?id=', id, "&stats=1")
} else if(type=='search') {
query <- gsub(" ", "+", query)
url <- paste0(start_url, 'search?query=', query)
if (exact) {
url <- paste0(url, '&exact=1')
}}
else if (type=='collection') {
url <- paste0(start_url, 'collection?username=', username)
if(include_collection_expansions==FALSE){
url <- paste0(url, '&excludesubtype=boardgameexpansion')
}
}
return(url)
}
build_bgg_url(type='thing', 167791)
build_games(c(167791,174430))
build_game(167791)
build_game(174430)
build_games(c(167791, 174430))
t <- build_game(167791)
g <- build_game(174430)
games <- tibble()
#this function builds a tibble containing details of a single game; internal use only.
build_game <- function(id) {
url <- build_bgg_url(type='thing', id=id)
response <- GET(url)
text <- content(response)
game <- tibble()
#thingtype <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//item/@type"))
#Get common properties
game$id <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//item/@id"))
game$name <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//name/@value"))[1]
game$description <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//description"))
game$year_published <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//yearpublished/@value"))[1]
game$min_players <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//minplayers/@value"))[1]
game$max_players <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//maxplayers/@value"))[1]
game$playing_time <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//playingtime/@value"))[1]
game$min_play_time <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//minplaytime/@value"))[1]
game$max_play_time <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//maxplaytime/@value"))[1]
game$minimum_age <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//minage/@value"))[1]
#  Get statistics
game$num_users_rated <- xml_integer(xml_find_all(xml_child(text, search=i), xpath="//usersrated/@value"))[1]
game$average <- xml_double(xml_find_all(xml_child(text, search=i), xpath="//average/@value"))[1]
game$bayes_average <- xml_double(xml_find_all(xml_child(text, search=i), xpath="//bayesaverage/@value"))[1]
#Get ranks: the rank_name=='boardgame' part forces all rpg or video options out because it forces integer(0)
rank_name <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//rank/@name"))
rank_value <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//rank/@value"))
rank_df <- data.frame(rank_name, rank_value)
rank_temp <- rank_df %>% filter(rank_name=='boardgame')%>% select(rank_value)
game$rank <- as.integer(as.character(rank_temp$rank_value))
#Get other properties same as above, rpg and video are forced out
type <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//link/@type"))
value <- xml_text(xml_find_all(xml_child(text, search=i), xpath="//link/@value"))
game$type_value <- data.frame(type, value)
cat <- type_value %>% filter(type=='boardgamecategory') %>% select(value)
game$categories <- paste0(cat$value, collapse="; ")
$mech <- type_value %>% filter(type=='boardgamemechanic') %>% select(value)
game$mechanics <- paste0(mech$value, collapse='; ')
fam <- type_value %>% filter(type=='boardgamefamily') %>% select(value)
game$family <- paste0(fam$value, collapse='; ')
exp <- type_value %>% filter(type=='boardgameexpansion') %>% select(value)
game$expansions <- paste0(exp$value, collapse='; ')
des  <- type_value %>% filter(type=='boardgamedesigner') %>% select(value)
game$designers <- paste0(des$value, collapse='; ')
art  <- type_value %>% filter(type=='boardgameartist') %>% select(value)
game$artists <- paste0(art$value, collapse='; ')
pub  <- type_value %>% filter(type=='boardgamepublisher') %>% select(value)
game$publishers <- paste0(pub$value, collapse='; ')
return(game)
}
#this function builds URLs to BGG for different types of requests such as thing, search, and collection. Internal use only.
build_bgg_url <- function(type, id=NULL, query=NULL, exact=FALSE, username=NULL, include_collection_expansions=TRUE) {
start_url <- "https://www.boardgamegeek.com/xmlapi2/"
if (type=='thing') {
url <- paste0(start_url, 'thing?id=', id, "&stats=1")
} else if(type=='search') {
query <- gsub(" ", "+", query)
url <- paste0(start_url, 'search?query=', query)
if (exact) {
url <- paste0(url, '&exact=1')
}}
else if (type=='collection') {
url <- paste0(start_url, 'collection?username=', username)
if(include_collection_expansions==FALSE){
url <- paste0(url, '&excludesubtype=boardgameexpansion')
}
}
return(url)
}
build_games <- function(ids) {
games <- tibble()
for (i in ids) {
games <- rbind(games, build_game(i))
Sys.sleep(2)
}
return(games)
}
#this is one of the two functions that the user of the package should interact with. It takes a search query, whether or not to include expansions,
#and whether or not the search should be exact. Then it calls the appropriate functions, and returns a tibble of all the search results.
search_bgg <- function(query, include_expansions=TRUE, exact=FALSE)
{
search_url <- build_bgg_url(type='search', query=query, exact=exact)
response<-GET(search_url)
search_text <- content(response)
ids <- xml_integer(xml_find_all(search_text, xpath='//item/@id'))
types <- xml_text(xml_find_all(search_text, xpath='//item/@type'))
ids_types <- data.frame(ids, types)
if(include_expansions) {
temp <- ids_types %>% filter(types=='boardgame' | types=='boardgameexpansion')
} else {
temp <- ids_types %>% filter(types=='boardgame')
}
ids <- temp$ids
return(build_games(ids))
}
#This is the second function that the user can interact with. It takes a username and builds a tibble of all the board games and expansions in that
#user's collection. Note that the expansions are included by default; use include_collection_expansions=FALSE to exclude them.
bgg_collection <- function(username, include_collection_expansions=TRUE){
a <- include_collection_expansions
collection_url <- build_bgg_url(type='collection', username=username, a)
response <- GET(collection_url)
collection_text <- content(response)
ids <- xml_integer(xml_find_all(collection_text, xpath='//item/@objectid'))
return(build_games(ids))
}
build_games(c(167791, 174430))
v <- bgg_collection('vazz16')
dim(v)
v
ggplot(v, aes(x=year_published, y=bayes_average))+geom_line()
v_recent <- v %>% filter(year_published>2007)
ggplot(v_recent, aes(x=year_published, y=bayes_average, text=name))+geom_line()
ggplot(v_recent, aes(x=year_published, y=bayes_average))+geom_line()
ggplot(v_recent, aes(x=year_published, y=bayes_average))+geom_line()+geom_point(aes(text=name))
ggplot(v_recent, aes(x=year_published, y=bayes_average))+geom_line()+geom_point(aes(label=name))
ggplot(v_recent, aes(x=year_published, y=bayes_average))+geom_line()+geom_point(aes(label=name))+geom_label(aes(label=name))
ggplot(v_recent, aes(x=year_published, y=bayes_average))+geom_line()+geom_label(aes(label=name))
ggplot(v_recent, aes(x=year_published, y=bayes_average))+geom_line()+geom_text(aes(label=name))
ggplot(v_recent, aes(x=year_published, y=bayes_average))+geom_line()+geom_text(aes(label=name), size=0.4)
ggplot(v_recent, aes(x=year_published, y=bayes_average))+geom_line()+geom_text(aes(label=name), size=0.8)
1
ggplot(v_recent, aes(x=year_published, y=bayes_average))+geom_line()+geom_text(aes(label=name), size=2)
ggplot(v_recent, aes(x=year_published, y=bayes_average))+geom_line()+geom_text(aes(label=name), size=2, angle=90)
ggplot(v_recent, aes(x=year_published, y=bayes_average))+geom_line()+geom_text(aes(label=name), size=2, angle=60)
ggplot(v_recent, aes(x=year_published, y=bayes_average))+geom_line()+geom_text(aes(label=name), size=3, angle=60)
ggplot(v_recent, aes(x=year_published, y=bayes_average))+geom_line()+geom_text(aes(label=name), size=3, angle=60, hjust=4)
ggplot(v_recent, aes(x=year_published, y=bayes_average))+geom_line()+geom_text(aes(label=name), size=3, angle=60, hjust=2)
ggplot(v_recent, aes(x=year_published, y=bayes_average))+geom_line()+geom_text(aes(label=name), size=3, angle=60, hjust=1)
ggplot(v_recent, aes(x=year_published, y=bayes_average))+geom_line()+geom_text(aes(label=name), size=3, angle=60, vjust=1)
library(devtools)
find_rtools()
library(devtools)
devtools::find_rtools()
has_devel()
has_devel()
Sys.getenv('PATH')
has_devel()
devtools::load_all()
devtools::load_all()
devtools::load_all()
Sys.setenv
Sys.getenv
Sys.getenv("PATH")
